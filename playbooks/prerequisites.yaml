- hosts: all
  gather_facts: true
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
    - name: Get Nvidia Tegra Release
      shell: uname -r | awk -F'-' '{print $2}'
      register: release
      retries: 5
      delay: 5
      until: release is succeeded

    - set_fact:
       release: "{{ release.stdout }}"
      retries: 5
      delay: 5
      register: set_release
      until: set_release is succeeded

    - name: Validate whether Kubernetes cluster installed
      shell: kubectl cluster-info
      register: k8sup
      no_log: True
      failed_when: false
      retries: 5
      delay: 5
      until: k8sup is succeeded

    - name: Create a APT KeyRing directory
      become: true
      when: "ansible_distribution == 'Ubuntu' and ansible_distribution_major_version <= '20' and 'running' not in k8sup.stdout"
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      retries: 5
      delay: 5
      register: create_keyring
      until: create_keyring is succeeded

    - name: Create a APT KeyRing directory
      become: true
      when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      file:
        path: /etc/apt/trusted.gpg
        state: touch
        mode: '0755'
      retries: 5
      delay: 5
      register: create_trusted_gpg
      until: create_trusted_gpg is succeeded
        
    - name: Add an Kubernetes apt signing key for Ubuntu
      become: true
      when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt_key:
        url: "{{ k8s_apt_key }}"
        keyring: "{{ k8s_apt_ring }}"
        state: present
      retries: 5
      delay: 5
      register: add_k8s_key
      until: add_k8s_key is succeeded

    - name: change apt repo
      shell: "echo {{ k8s_apt_key }} | rev  | cut -c12- | rev"
      register: k8s_apt_repository
      retries: 5
      delay: 5
      until: k8s_apt_repository is succeeded

    - name: change gpg repo
      shell: "echo {{ k8s_gpg_key }} | rev  | cut -c24- | rev"
      register: k8s_gpg_repository
      retries: 5
      delay: 5
      until: k8s_gpg_repository is succeeded

    - name: Adding Kubernetes apt repository for Ubuntu
      become: true
      when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt_repository:
        repo: "deb [signed-by={{ k8s_apt_ring }}] {{ k8s_apt_repository.stdout }} /"
        state: present
        filename: kubernetes
      retries: 5
      delay: 5
      register: add_k8s_repo
      until: add_k8s_repo is succeeded

    - name: Add kubernetes repo for RHEL
      become: true
      when: "ansible_distribution == 'RedHat' and 'running' not in k8sup.stdout"
      yum_repository:
        name: kubernetes
        description: Kubernetes repo
        baseurl: "{{ k8s_gpg_repository.stdout }}"
        gpgkey: "{{ k8s_gpg_key }}"
        gpgcheck: yes
        enabled: yes
        repo_gpgcheck: yes
      retries: 5
      delay: 5
      register: add_rhel_repo
      until: add_rhel_repo is succeeded

    - name: Install kubernetes components for Ubuntu on NVIDIA Cloud Native Stack
      become: true
      when: "ansible_distribution == 'Ubuntu'"
      apt:
        name: ['build-essential', 'net-tools', 'libseccomp2', 'apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet={{ k8s_version }}-1.1', 'kubeadm={{ k8s_version }}-1.1', 'kubectl={{ k8s_version }}-1.1']
        state: present
        update_cache: true
        allow_change_held_packages: yes
        force: yes
      retries: 5
      delay: 5
      register: install_k8s_ubuntu
      until: install_k8s_ubuntu is succeeded

    - name: Install kubernetes components for RedHat on NVIDIA Cloud Native Stack
      become: true
      when: "ansible_distribution == 'RedHat'"
      yum:
        name: ['net-tools', 'libseccomp', 'curl', 'ca-certificates', 'kubelet-{{ k8s_version }}', 'kubeadm-{{ k8s_version }}', 'kubectl-{{ k8s_version }}']
        state: present
      retries: 5
      delay: 5
      register: install_k8s_rhel
      until: install_k8s_rhel is succeeded

    - name: check update GCC for build essentials
      when: "ansible_distribution == 'Ubuntu'"
      become: true
      block:
        - name: capture gcc expected version
          shell: cat /proc/version | cut -d '(' -f 4 | cut -d ')' -f 1 | cut -d ' ' -f 2 | cut -d '.' -f 1
          register: gcc_expected_version

        - name: install expected gcc version
          apt:
            name: "gcc-{{ gcc_expected_version.stdout }}"
            state: present

        - name: install expected g++ version
          apt:
            name: "g++-{{ gcc_expected_version.stdout }}"
            state: present

        - name: capture gcc binary path
          shell: "which gcc"
          register: gcc_bin_path

        - name: capture g++ binary path
          shell: "which g++"
          register: g_plus_plus_bin_path

        - name: capture gcc expected version binary path
          shell: "which gcc-{{ gcc_expected_version.stdout }}"
          register: gcc_expected_version_bin_path

        - name: capture g++ expected version binary path
          shell: "which g++-{{ gcc_expected_version.stdout }}"
          register: g_plus_plus_expected_version_bin_path

        - name: setup expected gcc as primary gcc
          community.general.alternatives:
            name: gcc
            link: "{{ gcc_bin_path.stdout }}"
            path: "{{ gcc_expected_version_bin_path.stdout }}"
            subcommands:
            - name: g++
              link: "{{ g_plus_plus_bin_path.stdout }}"
              path: "{{ g_plus_plus_expected_version_bin_path.stdout }}"
            state: auto

    - name: Hold the installed Packages
      become: true
      when: "ansible_distribution == 'Ubuntu'"
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubectl
        - kubeadm
      retries: 5
      delay: 5
      register: hold_packages
      until: hold_packages is succeeded

    - name: Validate whether Kubernetes cluster installed
      shell: kubectl cluster-info
      register: k8sup
      no_log: True
      failed_when: false
      retries: 5
      delay: 5
      until: k8sup is succeeded

    - name: Remove swapfile from /etc/fstab
      become: true
      when: "'running' not in k8sup.stdout"
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
      retries: 5
      delay: 5
      register: remove_swap
      until: remove_swap is succeeded

    - name: Disable swap
      become: true
      when: "'running' not in k8sup.stdout"
      command: swapoff -a
      retries: 5
      delay: 5
      register: disable_swap
      until: disable_swap is succeeded

    - name: disable Firewall
      become: true
      when: "'running' not in k8sup.stdout and ansible_distribution == 'RedHat'"
      service:
        state: stopped
        name: firewalld
      retries: 5
      delay: 5
      register: disable_firewall
      until: disable_firewall is succeeded

#    - name: Firewall Rules
#      become: true
#     when: "'running' not in k8sup.stdout and ansible_distribution == 'RedHat'"
#     firewalld:
#       permanent: yes
#        immediate: yes
#        port: "{{item.port}}/{{item.proto}}"
#        state: "{{item.state}}"
#      with_items:
#       - {port: "6443", proto: "tcp", state: "enabled"}
#       - {port: "2379-2380", proto: "tcp", state: "enabled"}
#       - {port: "10230-10260", proto: "tcp", state: "enabled"}
#       - {port: "30000-32767", proto: "tcp", state: "enabled"}

    - name: Setup kernel modules for container runtime
      become: true
      block:
        - name: Create kubernetes.conf
          lineinfile:
            create: yes
            mode: 666
            path: /etc/modules-load.d/kubernetes.conf
            line: "{{ item }}"
          loop:
            - "overlay"
            - "br_netfilter"
          retries: 5
          delay: 5
          register: create_k8s_conf
          until: create_k8s_conf is succeeded

        - name: Modprobe for overlay and br_netfilter
          modprobe:
            name: "{{ item }}"
            state: present
          ignore_errors: true
          loop:
          - "overlay"
          - "br_netfilter"
          retries: 5
          delay: 5
          register: modprobe_modules
          until: modprobe_modules is succeeded

        - name: Add sysctl parameters to /etc/sysctl.conf
          sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: "{{ item.reload }}"
          loop:
            - {name: "net.bridge.bridge-nf-call-ip6tables", value: "1", reload: no}
            - {name: "net.bridge.bridge-nf-call-iptables", value: "1", reload: no}
            - {name: "net.ipv4.ip_forward", value: "1", reload: yes}
          retries: 5
          delay: 5
          register: add_sysctl
          until: add_sysctl is succeeded
      when: "cns_version >= 4.0"

    - name: Setup Containerd for Ubuntu
      become: true
      lineinfile:
        line: KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:/run/containerd/containerd.sock"
        path: /etc/default/kubelet
        create: yes
      when: "cns_version < 10.0 and container_runtime == 'containerd'"
      retries: 5
      delay: 5
      register: setup_containerd
      until: setup_containerd is succeeded

    - name: Setup Kubelet Parameters
      become: true
      lineinfile:
        line: KUBELET_EXTRA_ARGS=--serialize-image-pulls=true"
        path: /etc/default/kubelet
        create: yes
      when: "cns_version >= 10.0"
      retries: 5
      delay: 5
      register: setup_kubelet
      until: setup_kubelet is succeeded

    - name: Install Containerd for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Download cri-containerd-cni
          get_url:
            url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
            dest: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
            mode: 0664
          retries: 5
          delay: 5
          register: download_containerd
          until: download_containerd is succeeded

        - name: Untar cri-containerd-cni
          unarchive:
            src: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
            dest: /usr/local/
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir
          retries: 5
          delay: 5
          register: untar_containerd
          until: untar_containerd is succeeded

        - name: Download runc
          get_url:
            url: https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64
            dest: /usr/local/sbin/runc
            mode: 0777
          retries: 5
          delay: 5
          register: download_runc
          until: download_runc is succeeded

        - name: Download CNI Plugins
          get_url:
            url: https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugins_version }}/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
            dest: /tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
          retries: 5
          delay: 5
          register: download_cni
          until: download_cni is succeeded

        - name: Create /etc/containerd
          file:
            path: /opt/cni/bin/
            state: directory
            mode: '0755'
          retries: 5
          delay: 5
          register: create_containerd_dir
          until: create_containerd_dir is succeeded

        - name: Untar CNI
          unarchive:
            src: /tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
            dest: /opt/cni/bin/
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir
          retries: 5
          delay: 5
          register: untar_cni
          until: untar_cni is succeeded

        - name: Remove Containerd tar
          file:
            path:  /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
            state: absent
          retries: 5
          delay: 5
          register: remove_containerd_tar
          until: remove_containerd_tar is succeeded
      when: "ansible_system == 'Linux' and ansible_architecture == 'x86_64'"

    - name: Install Containerd for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Download cri-containerd-cni
          get_url:
            url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-arm64.tar.gz
            dest: /tmp/containerd-{{ containerd_version }}-linux-arm64.tar.gz
            mode: 0664
          retries: 5
          delay: 5
          register: download_containerd_arm
          until: download_containerd_arm is succeeded

        - name: Untar cri-containerd-cni
          unarchive:
            src: /tmp/containerd-{{ containerd_version }}-linux-arm64.tar.gz
            dest: /usr/local/
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir
          retries: 5
          delay: 5
          register: untar_containerd_arm
          until: untar_containerd_arm is succeeded

        - name: Download runc
          get_url:
            url: https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.arm64
            dest: /usr/local/sbin/runc
            mode: 0777
          retries: 5
          delay: 5
          register: download_runc_arm
          until: download_runc_arm is succeeded

        - name: Download CNI Plugins
          get_url:
            url: https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugins_version }}/cni-plugins-linux-arm64-v{{ cni_plugins_version }}.tgz
            dest: /tmp/cni-plugins-linux-arm64-v{{ cni_plugins_version }}.tgz
          retries: 5
          delay: 5
          register: download_cni_arm
          until: download_cni_arm is succeeded

        - name: Create /etc/containerd
          file:
            path: /opt/cni/bin/
            state: directory
            mode: '0755'
          retries: 5
          delay: 5
          register: create_containerd_dir_arm
          until: create_containerd_dir_arm is succeeded

        - name: Untar CNI
          unarchive:
            src: /tmp/cni-plugins-linux-arm64-v{{ cni_plugins_version }}.tgz
            dest: /opt/cni/bin/
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir
          retries: 5
          delay: 5
          register: untar_cni_arm
          until: untar_cni_arm is succeeded

        - name: Remove Containerd tar
          file:
            path:  /tmp/containerd-{{ containerd_version }}-linux-arm64.tar.gz
            state: absent
          retries: 5
          delay: 5
          register: remove_containerd_tar_arm
          until: remove_containerd_tar_arm is succeeded
      when: "ansible_system == 'Linux' and ansible_architecture == 'aarch64'"

    - name: Configure Containerd for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Create /etc/containerd
          file:
            path: /etc/containerd
            state: directory
          retries: 5
          delay: 5
          register: create_containerd_config_dir
          until: create_containerd_config_dir is succeeded

        - name: Download Containerd Service
          get_url:
            url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
            dest: /etc/systemd/system/
            mode: 0777
          retries: 5
          delay: 5
          register: download_containerd_service
          until: download_containerd_service is succeeded

        - name: Get defaults from containerd
          shell: /usr/local/bin/containerd config default > /etc/containerd/config.toml
          changed_when: false
          register: containerd_config_default
          retries: 5
          delay: 5
          until: containerd_config_default is succeeded

        - name: Enable systemd cgroups
          shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml; sed -i 's/    max_concurrent_downloads = 3/    max_concurrent_downloads = {{ containerd_max_concurrent_downloads}}/g' /etc/containerd/config.toml
          retries: 5
          delay: 5
          register: enable_systemd_cgroups
          until: enable_systemd_cgroups is succeeded

        - name: restart containerd
          systemd_service:
            name: containerd
            state: started
            daemon_reload: yes
            enabled: true
          retries: 5
          delay: 5
          register: restart_containerd
          until: restart_containerd is succeeded
      when: "cns_version >= 4.1 and ansible_system == 'Linux' and container_runtime == 'containerd'"

    - name: Add Containerd Proxy configuration
      become: true
      block:
        - name: Get Host IP
          shell: interface=$(ip a | grep 'state UP' |  egrep 'enp*|ens*|eno*|enc*|eth*|bond*|wlan*' | awk '{print $2}' | sed 's/://g'); for i in $interface; do ifconfig $i | grep -iw inet | awk '{print $2}'; done
          register: network
          retries: 5
          delay: 5
          until: network is succeeded

        - name: subnet
          shell: echo {{ network.stdout_lines[0] }} | cut -d. -f1-3
          register: subnet
          retries: 5
          delay: 5
          until: subnet is succeeded

        - name: Create containerd.service.d
          file:
            path: /etc/systemd/system/containerd.service.d
            state: directory
            recurse: yes
          retries: 5
          delay: 5
          register: create_containerd_service_dir
          until: create_containerd_service_dir is succeeded

        - name: create http-proxy.conf
          lineinfile:
            create: yes
            mode: 666
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            line: "{{ item }}"
          loop:
          - "[Service]"
          - "Environment='NO_PROXY={{ network.stdout_lines[0] }},localhost,127.0.0.0/8,10.96.0.1/24,10.244.0.0/16,192.168.32.0/22,{{ subnet.stdout }}.0/24'"
          - "Environment='HTTPS_PROXY={{ https_proxy }}'"
          - "Environment='HTTP_PROXY={{ http_proxy }}'"
          retries: 5
          delay: 5
          register: create_proxy_conf
          until: create_proxy_conf is succeeded

        - name: restart containerd
          systemd_service:
            name: containerd
            state: restarted
            daemon_reload: yes
          retries: 5
          delay: 5
          register: restart_containerd_proxy
          until: restart_containerd_proxy is succeeded
      when: "proxy == true and cns_version >= 6.1 and container_runtime == 'containerd'"

    - name: Install CRI-O on Ubuntu
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and cns_version >= 12.0"
      become: true
      block:
        - name: trim CRI-O version
          shell: echo {{ crio_version }} | awk -F'.' '{print $1"."$2}'
          register: cri_version
          retries: 5
          delay: 5
          until: cri_version is succeeded

        - name: set version
          set_fact:
            version: "{{ cri_version.stdout }}"
          retries: 5
          delay: 5
          register: set_cri_version
          until: set_cri_version is succeeded

        - name: Adding CRI-O apt key
          apt_key:
            url: "https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ version }}/deb/Release.key"
            keyring: "/etc/apt/keyrings/cri-o-apt-keyring.gpg"
            state: present
          retries: 5
          delay: 5
          register: add_crio_key
          until: add_crio_key is succeeded

        - name: copy the apt keys
          shell: "{{ item }}"
          with_items:
            - cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d
          retries: 5
          delay: 5
          register: copy_apt_keys
          until: copy_apt_keys is succeeded

        - name: Add CRIO repository
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ version }}/deb/ /"
            state: present
            filename: cri-o.list
          retries: 5
          delay: 5
          register: add_crio_repo
          until: add_crio_repo is succeeded

    - name: Install CRI-O on Ubuntu
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and cns_version >= 12.0"
      become: true
      block:
        - name: install CRI-O
          apt:
            name: ['cri-o']
            state: present
            update_cache: true
            force: yes
          retries: 5
          delay: 5
          register: install_crio
          until: install_crio is succeeded

        - name: Create overlay-images directory
          file:
            path: /var/lib/containers/storage/overlay-images
            state: directory
          retries: 5
          delay: 5
          register: create_overlay_dir
          until: create_overlay_dir is succeeded

        - name: Update crio.conf
          blockinfile:
            path: /etc/crio/crio.conf.d/10-crio.conf
            block: |
              hooks_dir = [
                    "/usr/share/containers/oci/hooks.d",
              ]
          retries: 5
          delay: 5
          register: update_crio_conf
          until: update_crio_conf is succeeded

    - name: Install CRI-O on Ubuntu 22.04
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '22' and cns_version < 12.0"
      become: true
      block:
        - name: trim CRI-O version
          shell: echo {{ crio_version }} | awk -F'.' '{print $1"."$2}'
          register: cri_version
          retries: 5
          delay: 5
          until: cri_version is succeeded

        - name: set version
          set_fact:
            version: "{{ cri_version.stdout }}"
          retries: 5
          delay: 5
          register: set_cri_version_22
          until: set_cri_version_22 is succeeded

        - name: Adding CRI-O apt key
          apt_key:
            url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_distribution }}_22.04/Release.key"
            keyring: /etc/apt/keyrings/libcontainers-archive-keyring.gpg
            state: present
          retries: 5
          delay: 5
          register: add_crio_key_22
          until: add_crio_key_22 is succeeded

        - name: Adding CRI-O apt key
          apt_key:
            url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/x{{ ansible_distribution }}_22.04/Release.key"
            keyring: /etc/apt/keyrings/libcontainers-crio-archive-keyring.gpg
            state: present
          retries: 5
          delay: 5
          register: add_crio_key_22_2
          until: add_crio_key_22_2 is succeeded

        - name: copy the apt keys
          shell: "{{ item }}"
          with_items:
            - cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d
          retries: 5
          delay: 5
          register: copy_apt_keys_22
          until: copy_apt_keys_22 is succeeded

        - name: Add CRIO repository
          apt_repository:
            repo: "deb  [signed-by=/etc/apt/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_distribution }}_22.04 /"
            state: present
            filename: devel:kubic:libcontainers:stable
          retries: 5
          delay: 5
          register: add_crio_repo_22
          until: add_crio_repo_22 is succeeded

        - name: Add CRIO repository
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/x{{ ansible_distribution }}_22.04 /"
            state: present
            filename: devel:kubic:libcontainers:stable:cri-o:{{ k8s_version }}
          retries: 5
          delay: 5
          register: add_crio_repo_22_2
          until: add_crio_repo_22_2 is succeeded

    - name: Install CRI-O on Ubuntu 20.04
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version <= '20' and cns_version < 12.0"
      become: true
      block:
        - name: trim CRI-O version
          shell: echo {{ crio_version }} | awk -F'.' '{print $1"."$2}'
          register: cri_version
          retries: 5
          delay: 5
          until: cri_version is succeeded

        - name: set version
          set_fact:
            version: "{{ cri_version.stdout }}"
          retries: 5
          delay: 5
          register: set_cri_version_20
          until: set_cri_version_20 is succeeded

        - name: Adding CRI-O apt key
          apt_key:
            url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_distribution }}_20.04/Release.key"
            state: present
          retries: 5
          delay: 5
          register: add_crio_key_20
          until: add_crio_key_20 is succeeded

        - name: Adding CRI-O apt key
          apt_key:
            url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/x{{ ansible_distribution }}_20.04/Release.key"
            state: present
          retries: 5
          delay: 5
          register: add_crio_key_20_2
          until: add_crio_key_20_2 is succeeded

        - name: copy the apt keys
          shell: "{{ item }}"
          with_items:
            - cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d
          retries: 5
          delay: 5
          register: copy_apt_keys_20
          until: copy_apt_keys_20 is succeeded

        - name: Add CRIO repository
          apt_repository:
            repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_distribution }}_20.04 /"
            state: present
            filename: devel:kubic:libcontainers:stable
          retries: 5
          delay: 5
          register: add_crio_repo_20
          until: add_crio_repo_20 is succeeded

        - name: Add CRIO repository
          apt_repository:
            repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/x{{ ansible_distribution }}_20.04 /"
            state: present
            filename: devel:kubic:libcontainers:stable:cri-o:{{ k8s_version }}
          retries: 5
          delay: 5
          register: add_crio_repo_20_2
          until: add_crio_repo_20_2 is succeeded

    - name: Install CRI-O on Ubuntu
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and cns_version < 10.0 "
      become: true
      block:
        - name: Setup CRI-O for Ubuntu
          become: true
          lineinfile:
            line: KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:///var/run/crio/crio.sock"
            path: /etc/default/kubelet
            create: yes
          retries: 5
          delay: 5
          register: setup_crio_ubuntu
          until: setup_crio_ubuntu is succeeded

    - name: Install CRI-O on Ubuntu
      when: "container_runtime == 'cri-o' and ansible_distribution == 'Ubuntu' and cns_version < 12.0"
      become: true
      block:
        - name: install CRI-O
          apt:
            name: ['cri-o', 'cri-o-runc']
            state: present
            update_cache: true
            allow_change_held_packages: yes
            force: yes
          retries: 5
          delay: 5
          register: install_crio_ubuntu
          until: install_crio_ubuntu is succeeded

    - name: Install CRI-O on RHEL
      when: "container_runtime == 'cri-o' and ansible_distribution == 'RedHat' and cns_version < 12.0"
      become: true
      block:
        - name: trim CRI-O version
          shell: echo {{ crio_version }} | awk -F'.' '{print $1"."$2}'
          register: cri_version
          retries: 5
          delay: 5
          until: cri_version is succeeded

        - name: set version
          set_fact:
            version: "{{ cri_version.stdout }}"
          retries: 5
          delay: 5
          register: set_cri_version_rhel
          until: set_cri_version_rhel is succeeded

        - name: Add CRIO repository
          yum_repository:
            name: devel:kubic:libcontainers:stable:cri-o:{{ version }}
            baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/CentOS_8/
            gpgcheck: 1
            gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/CentOS_8/repodata/repomd.xml.key
            enabled: 1
            description: CRIO Repo
          retries: 5
          delay: 5
          register: add_crio_repo_rhel
          until: add_crio_repo_rhel is succeeded

        - name: Add CRIO repository
          yum_repository:
            baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/
            gpgcheck: 1
            gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/repodata/repomd.xml.key
            enabled: 1
            name: devel:kubic:libcontainers:stable
            description: CRIO Repo
          retries: 5
          delay: 5
          register: add_crio_repo_rhel_2
          until: add_crio_repo_rhel_2 is succeeded

        - name: install CRI-O
          when: cns_version < 12.0
          yum:
            name: ['cri-o', 'cri-tools']
            state: present
          retries: 5
          delay: 5
          register: install_crio_rhel
          until: install_crio_rhel is succeeded

    - name: Install CRI-O
      when: "container_runtime == 'cri-o' and cns_version < 12.0"
      become: true
      block:
        - name: Create overlay-images directory
          file:
            path: /var/lib/containers/storage/overlay-images
            state: directory
          retries: 5
          delay: 5
          register: create_overlay_dir_crio
          until: create_overlay_dir_crio is succeeded

        - name: create default CRIO conf
          shell: crio config --default > /etc/crio/crio.conf
          failed_when: false
          retries: 5
          delay: 5
          register: create_crio_conf
          until: create_crio_conf is succeeded

        - name: Update crio.conf
          blockinfile:
            path: /etc/crio/crio.conf
            block: |
              hooks_dir = [
                    "/usr/share/containers/oci/hooks.d",
              ]
          retries: 5
          delay: 5
          register: update_crio_conf_2
          until: update_crio_conf_2 is succeeded

    - name: Install CRI-O on RHEL
      when: "container_runtime == 'cri-o' and ansible_distribution == 'RedHat' and cns_version >= 12.0"
      become: true
      block:
        - name: trim CRI-O version
          shell: echo {{ crio_version }} | awk -F'.' '{print $1"."$2}'
          register: cri_version
          retries: 5
          delay: 5
          until: cri_version is succeeded

        - name: set version
          set_fact:
            version: "{{ cri_version.stdout }}"
          retries: 5
          delay: 5
          register: set_cri_version_rhel_12
          until: set_cri_version_rhel_12 is succeeded

        - name: Add CRIO repository
          yum_repository:
            name: cri-o
            baseurl: https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ version }}/rpm/
            gpgcheck: 1
            gpgkey: https://pkgs.k8s.io/addons:/cri-o:/stable:/v{{ version }}/rpm/repodata/repomd.xml.key
            enabled: 1
            description: CRIO Repo
          retries: 5
          delay: 5
          register: add_crio_repo_rhel_12
          until: add_crio_repo_rhel_12 is succeeded

        - name: install CRI-O
          when: cns_version >= 12.0
          yum:
            name: ['container-selinux', 'cri-o']
            state: present
          retries: 5
          delay: 5
          register: install_crio_rhel_12
          until: install_crio_rhel_12 is succeeded

        - name: Create overlay-images directory
          file:
            path: /var/lib/containers/storage/overlay-images
            state: directory
          retries: 5
          delay: 5
          register: create_overlay_dir_rhel_12
          until: create_overlay_dir_rhel_12 is succeeded

        - name: Update crio.conf
          blockinfile:
            path: /etc/crio/crio.conf.d/10-crio.conf
            block: |
              hooks_dir = [
                    "/usr/share/containers/oci/hooks.d",
              ]
          retries: 5
          delay: 5
          register: update_crio_conf_rhel_12
          until: update_crio_conf_rhel_12 is succeeded

    - name: Create OCI directory
      when: cns_docker == true and container_runtime == 'cri-o'
      become: true
      no_log: True
      failed_when: false
      file:
        path: /usr/share/containers/oci/hooks.d/
        state: directory
        mode: '0755'
      retries: 5
      delay: 5
      register: create_oci_dir
      until: create_oci_dir is succeeded

    - name: Enable OCI hook for CRI-O
      when: cns_docker == true and container_runtime == 'cri-o'
      become: true
      copy:
        dest: /usr/share/containers/oci/hooks.d/oci-nvidia-hook.json
        content: |
          {
              "version": "1.0.0",
              "hook": {
                  "path": "/usr/bin/nvidia-container-runtime-hook",
                  "args": ["nvidia-container-runtime-hook", "prestart"],
                  "env": [
                      "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                  ]
              },
              "when": {
                  "always": true,
                  "commands": [".*"]
              },
              "stages": ["prestart"]
          }
      retries: 5
      delay: 5
      register: enable_oci_hook
      until: enable_oci_hook is succeeded

    - name: Check docker is installed
      shell: docker
      register: docker_exists
      no_log: true
      failed_when: false
      retries: 5
      delay: 5
      until: docker_exists is succeeded

    - name: Install Docker Dependencies on Ubuntu
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - gnupg
          - apt-utils
          - unzip
        state: latest
        update_cache: true
      retries: 5
      delay: 5
      register: install_docker_deps_ubuntu
      until: install_docker_deps_ubuntu is succeeded

    - name: Install Docker Dependencies on RHEL
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'RedHat'
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - unzip
        state: latest
      retries: 5
      delay: 5
      register: install_docker_deps_rhel
      until: install_docker_deps_rhel is succeeded

    - name: Add Docker APT signing key
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present
      retries: 5
      delay: 5
      register: add_docker_key
      until: add_docker_key is succeeded

    - name: Add Docker repository into sources list
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'Ubuntu'
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      retries: 5
      delay: 5
      register: add_docker_repo
      until: add_docker_repo is succeeded

    - name: Add Docker repo on RHEL
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'RedHat'
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo
      retries: 5
      delay: 5
      register: add_docker_repo_rhel
      until: add_docker_repo_rhel is succeeded

    - name: Get CRI Dockerd
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_system == 'Linux' and ansible_architecture == 'x86_64'
      unarchive:
        src: https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz
        dest: /usr/local/bin/
        remote_src: yes
        mode: 0777
        extra_opts: [--strip-components=1]
      retries: 5
      delay: 5
      register: get_cri_dockerd
      until: get_cri_dockerd is succeeded

    - name: Get CRI Dockerd
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_system == 'Linux' and ansible_architecture == 'aarch64'
      unarchive:
        src: https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.arm64.tgz
        dest: /usr/local/bin/
        remote_src: yes
        mode: 0777
        extra_opts: [--strip-components=1]
      retries: 5
      delay: 5
      register: get_cri_dockerd_arm
      until: get_cri_dockerd_arm is succeeded

    - name: Get CRI DockerD Service
      become: true
      when: container_runtime == 'cri-dockerd'
      get_url:
        url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
        dest: /etc/systemd/system/
      retries: 5
      delay: 5
      register: get_cri_docker_service
      until: get_cri_docker_service is succeeded

    - name: Get CRI DockerD Service
      become: true
      when: container_runtime == 'cri-dockerd'
      get_url:
        url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
        dest: /etc/systemd/system/
      retries: 5
      delay: 5
      register: get_cri_docker_socket
      until: get_cri_docker_socket is succeeded

    - name: Update CRI Dockerd
      become: true
      shell: "sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service"
      when: container_runtime == 'cri-dockerd'
      retries: 5
      delay: 5
      register: update_cri_dockerd
      until: update_cri_dockerd is succeeded

    - name: Install Docker on Ubuntu
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'Ubuntu'
      package:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: latest
      register: docker_status
      retries: 5
      delay: 5
      until: docker_status is succeeded

    - name: Install Docker on RHEL
      become: true
      when: container_runtime == 'cri-dockerd' and ansible_distribution == 'RedHat'
      yum:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: latest
        allowerasing: true
      register: docker_status_rhel
      retries: 5
      delay: 5
      until: docker_status_rhel is succeeded

    - name: Update docker service 
      when: container_runtime == 'cri-dockerd'
      shell: sed -i 's/\/usr\/bin\/dockerd/\/usr\/bin\/dockerd -H unix:\/\/\/var\/run\/docker.sock/g' /lib/systemd/system/docker.service; systemctl daemon-reload; systemctl restart docker
      become: true
      ignore_errors: true
      retries: 5
      delay: 5
      register: update_docker_service
      until: update_docker_service is succeeded

## For Jetson Only
    - name: get current JetPack version
      shell: cat /etc/nv_tegra_release | awk '{print $5}' | sed 's/,//g'
      when: release == 'tegra'
      register: jversion
      retries: 5
      delay: 5
      until: jversion is succeeded

    - name: get Current Tegra release
      shell: "cat /etc/apt/sources.list.d/nvidia-l4t-apt-source.list | awk '{print $3}' | tail -1f"
      register: tver
      retries: 5
      delay: 5
      until: tver is succeeded

    - name: Installing Latest Nvidia Jetson JetPack
      become: true
      block:
        - name: update Tegra Release to r35.4
          shell: sed -i "s/{{ tver.stdout }}/r35.4/g" /etc/apt/sources.list.d/nvidia-l4t-apt-source.list
          become: true
          retries: 5
          delay: 5
          register: update_tegra_release
          until: update_tegra_release is succeeded
          
        - name: Install New Jetapck 5.1.2
          ignore_errors: yes
          apt:
            name: nvidia-jetpack
            state: present
            force: yes
            autoremove: yes
            update_cache: yes
          retries: 5
          delay: 5
          register: install_jetpack
          until: install_jetpack is succeeded
      when: "release == 'tegra' and cns_version == 10.2 or release == 'tegra' and cns_version == 9.3 or release == 'tegra' and cns_version == 8.5"

    - name: Installing Latest Nvidia Jetson JetPack
      become: true
      block:
        - name: get Current Tegra release
          shell: "cat /etc/apt/sources.list.d/nvidia-l4t-apt-source.list | awk '{print $3}' | tail -1f"
          register: tver
          retries: 5
          delay: 5
          until: tver is succeeded

        - name: update Tegra Release to r35.3
          shell: sed -i "s/{{ tver.stdout }}/r35.3/g" /etc/apt/sources.list.d/nvidia-l4t-apt-source.list
          become: true
          retries: 5
          delay: 5
          register: update_tegra_release_35_3
          until: update_tegra_release_35_3 is succeeded

        - name: Install New Jetapck 5.1.1
          ignore_errors: yes
          apt:
            name: nvidia-jetpack
            state: present
            force: yes
            autoremove: yes
            update_cache: yes
          retries: 5
          delay: 5
          register: install_jetpack_35_3
          until: install_jetpack_35_3 is succeeded
      when: "release == 'tegra' and cns_version <= 10.1 and jversion.stdout < '3.1' or release == 'tegra' and cns_version <= 9.2 and jversion.stdout < '3.1' or release == 'tegra' and cns_version <= 8.4 and jversion.stdout < '3.1'"

    - name: Configure Containerd for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Create /etc/containerd
          file:
            path: /etc/containerd
            state: directory
          retries: 5
          delay: 5
          register: create_containerd_dir_2
          until: create_containerd_dir_2 is succeeded
            
        - name: Write defaults to config.toml
          copy:
            src: "{{lookup('pipe', 'pwd')}}/files/config.toml"
            dest: /etc/containerd/config.toml
            mode: 0664
          retries: 5
          delay: 5
          register: write_config_toml
          until: write_config_toml is succeeded

        - name: Enable systemd cgroups
          shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
          retries: 5
          delay: 5
          register: enable_systemd_cgroups_2
          until: enable_systemd_cgroups_2 is succeeded

        - name: restart containerd
          systemd_service:
            name: containerd
            state: restarted
            daemon_reload: yes
          retries: 5
          delay: 5
          register: restart_containerd_2
          until: restart_containerd_2 is succeeded
      when: "cns_version >= 5.0 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version >= '18' and 'running' not in k8sup.stdout and release == 'tegra' and container_runtime == 'containerd'"

    - name: Installing Latest Nvidia Container Runtime on Cloud Native Stack 7.4 or 8.3 or 9.1 or 10.0
      become: true
      block:
        - name: Add NVIDIA Docker apt signing key for Ubuntu
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            state: present
          retries: 5
          delay: 5
          register: add_nvidia_key
          until: add_nvidia_key is succeeded

        - name: Get NVIDIA Docker Apt list
          get_url:
            url: https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list
            dest: /etc/apt/sources.list.d/libnvidia-container.list
            mode: 0644
          retries: 5
          delay: 5
          register: get_nvidia_apt_list
          until: get_nvidia_apt_list is succeeded

        - name: Remove old nvidia container tooklit
          apt:
            name: ['nvidia-container-toolkit=*', 'nvidia-container-runtime*']
            state: absent
            autoremove: yes
          retries: 5
          delay: 5
          register: remove_old_nvidia
          until: remove_old_nvidia is succeeded

        - name: Install NVIDIA Container Runtime
          apt:
            name: ['nvidia-docker2=2.13.0-1', 'nvidia-container-toolkit=1.13.1-1', 'nvidia-container-toolkit-base=1.13.1-1', 'libnvidia-container-tools=1.13.1-1', 'libnvidia-container1=1.13.1-1']
            state: present
            update_cache: yes
            force: yes
          retries: 5
          delay: 5
          register: install_nvidia_runtime
          until: install_nvidia_runtime is succeeded
      when: "cns_version == 7.4 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 8.3 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 9.1 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 10.0 and ansible_distribution == 'Ubuntu' and release == 'tegra'"

    - name: Installing Latest Nvidia Container Runtime on Cloud Native Stack 7.5 or 8.4 or 9.2 or 10.1
      become: true
      block:
        - name: Add NVIDIA Docker apt signing key for Ubuntu
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            state: present
          retries: 5
          delay: 5
          register: add_nvidia_key_2
          until: add_nvidia_key_2 is succeeded

        - name: Get NVIDIA Docker Apt list
          get_url:
            url: https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list
            dest: /etc/apt/sources.list.d/libnvidia-container.list
            mode: 0644
          retries: 5
          delay: 5
          register: get_nvidia_apt_list_2
          until: get_nvidia_apt_list_2 is succeeded

        - name: Remove old nvidia container tooklit
          apt:
            name: ['nvidia-container-toolkit=*', 'nvidia-container-runtime*']
            state: absent
            autoremove: yes
          retries: 5
          delay: 5
          register: remove_old_nvidia_2
          until: remove_old_nvidia_2 is succeeded

        - name: Install NVIDIA Container Runtime
          apt:
            name: ['nvidia-docker2=2.13.0-1', 'nvidia-container-toolkit=1.13.2-1', 'nvidia-container-toolkit-base=1.13.2-1', 'libnvidia-container-tools=1.13.2-1', 'libnvidia-container1=1.13.2-1']
            state: present
            update_cache: yes
            force: yes
          retries: 5
          delay: 5
          register: install_nvidia_runtime_2
          until: install_nvidia_runtime_2 is succeeded
      when: "cns_version == 7.5 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 8.4 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 9.2 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 10.1 and ansible_distribution == 'Ubuntu' and release == 'tegra'"

    - name: Installing Latest Nvidia Container Runtime on Cloud Native Stack 8.5 or 9.3 or 10.2
      become: true
      block:
        - name: Add NVIDIA Docker apt signing key for Ubuntu
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            state: present
          retries: 5
          delay: 5
          register: add_nvidia_key_3
          until: add_nvidia_key_3 is succeeded

        - name: Get NVIDIA Docker Apt list
          get_url:
            url: https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list
            dest: /etc/apt/sources.list.d/libnvidia-container.list
            mode: 0644
          retries: 5
          delay: 5
          register: get_nvidia_apt_list_3
          until: get_nvidia_apt_list_3 is succeeded

        - name: Remove old nvidia container tooklit
          apt:
            name: ['nvidia-container-toolkit=*', 'nvidia-container-runtime*']
            state: absent
            autoremove: yes
          retries: 5
          delay: 5
          register: remove_old_nvidia_3
          until: remove_old_nvidia_3 is succeeded

        - name: Install NVIDIA Container Runtime
          apt:
            name: ['nvidia-docker2=2.13.0-1', 'nvidia-container-toolkit=1.13.5-1', 'nvidia-container-toolkit-base=1.13.5-1', 'libnvidia-container-tools=1.13.5-1', 'libnvidia-container1=1.13.5-1']
            state: present
            update_cache: yes
            force: yes
          retries: 5
          delay: 5
          register: install_nvidia_runtime_3
          until: install_nvidia_runtime_3 is succeeded
      when: "cns_version == 8.5 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 9.3 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 10.2 and ansible_distribution == 'Ubuntu' and release == 'tegra'"

    - name: Installing Latest Nvidia Container Runtime on Cloud Native Stack 9.4 or 10.3 or 11.0
      become: true
      block:
        - name: Add NVIDIA Docker apt signing key for Ubuntu
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            state: present
          retries: 5
          delay: 5
          register: add_nvidia_key_4
          until: add_nvidia_key_4 is succeeded

        - name: Get NVIDIA Docker Apt list
          get_url:
            url: https://nvidia.github.io/libnvidia-container/ubuntu22.04/libnvidia-container.list
            dest: /etc/apt/sources.list.d/libnvidia-container.list
            mode: 0644
          retries: 5
          delay: 5
          register: get_nvidia_apt_list_4
          until: get_nvidia_apt_list_4 is succeeded

        - name: Remove old nvidia container tooklit
          apt:
            name: ['nvidia-container-toolkit=*', 'nvidia-container-runtime*']
            state: absent
            autoremove: yes
          retries: 5
          delay: 5
          register: remove_old_nvidia_4
          until: remove_old_nvidia_4 is succeeded

        - name: Install NVIDIA Container Runtime
          apt:
            name: ['nvidia-docker2=2.14.0-1', 'nvidia-container-toolkit=1.14.3-1', 'nvidia-container-toolkit-base=1.14.3-1', 'libnvidia-container-tools=1.14.3-1', 'libnvidia-container1=1.14.3-1']
            state: present
            update_cache: yes
            force: yes
          retries: 5
          delay: 5
          register: install_nvidia_runtime_4
          until: install_nvidia_runtime_4 is succeeded
      when: "cns_version == 9.4 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 10.3 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 11.0 and ansible_distribution == 'Ubuntu' and release == 'tegra'"

    - name: Installing Latest Nvidia Container Runtime on Cloud Native Stack 10.4 or 11.1 or 12.0
      become: true
      block:
        - name: Add NVIDIA Docker apt signing key for Ubuntu
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            keyring: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
            state: present
          retries: 5
          delay: 5
          register: add_nvidia_key_5
          until: add_nvidia_key_5 is succeeded

        - name: Get NVIDIA Container Toolkit Apt list
          apt_repository:
            repo: "{{ item }}"
            state: present
            filename: libnvidia-container.list
          with_items:
            - deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/ubuntu18.04/$(ARCH) /
            - deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
          retries: 5
          delay: 5
          register: get_nvidia_apt_list_5
          until: get_nvidia_apt_list_5 is succeeded

        - name: Remove old nvidia container tooklit
          apt:
            name: ['nvidia-container-toolkit=*', 'nvidia-container-runtime*']
            state: absent
            autoremove: yes
          retries: 5
          delay: 5
          register: remove_old_nvidia_5
          until: remove_old_nvidia_5 is succeeded

        - name: Install NVIDIA Container Runtime
          apt:
            name: ['nvidia-docker2=2.14.0-1', 'nvidia-container-toolkit=1.14.6-1', 'nvidia-container-toolkit-base=1.14.6-1', 'libnvidia-container-tools=1.14.6-1', 'libnvidia-container1=1.14.6-1']
            state: present
            update_cache: yes
            force: yes
          retries: 5
          delay: 5
          register: install_nvidia_runtime_5
          until: install_nvidia_runtime_5 is succeeded
      when: "cns_version == 10.4 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 11.1 and ansible_distribution == 'Ubuntu' and release == 'tegra' or cns_version == 12.0 and ansible_distribution == 'Ubuntu' and release == 'tegra'"

    - name: Starting and enabling the required services
      become: true
      systemd_service:
        name: "{{ item }}"
        state: started
        enabled: yes
      failed_when: false
      with_items:
        - docker
        - kubelet
        - containerd
        - crio
        - cri-o
        - cri-docker
      retries: 5
      delay: 5
      register: start_services
      until: start_services is succeeded
         
    - name: "Install Helm on NVIDIA Cloud Native Stack"
      become: true
      command: "{{ item }}"
      with_items:
        - curl -O https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
        - tar -xvzf helm-v{{ helm_version }}-linux-amd64.tar.gz
        - cp linux-amd64/helm /usr/local/bin/
        - rm -rf helm-v{{ helm_version }}-linux-amd64.tar.gz linux-amd64
      when: "ansible_architecture == 'x86_64'"
      retries: 5
      delay: 5
      register: install_helm_x86
      until: install_helm_x86 is succeeded

    - name: "Install Helm on NVIDIA Cloud Native Stack"
      become: true
      command: "{{ item }}"
      with_items:
        - curl -O https://get.helm.sh/helm-v{{ helm_version }}-linux-arm64.tar.gz
        - tar -xvzf helm-v{{ helm_version }}-linux-arm64.tar.gz
        - cp linux-arm64/helm /usr/local/bin/
        - rm -rf helm-v{{ helm_version }}-linux-arm64.tar.gz linux-arm64
      when: "ansible_architecture == 'aarch64'"
      retries: 5
      delay: 5
      register: install_helm_arm
      until: install_helm_arm is succeeded
