- hosts: master
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - set_fact: 
       cns_docker: "{{ cns_docker }}"
       cns_nvidia_driver: "{{ cns_nvidia_driver }}"
       cns_validation: "{{ cns_validation }}"

   - name: Get Nvidia Tegra Release
     shell: uname -r | awk -F'-' '{print $2}'
     register: release

   - set_fact:
       release: "{{ release.stdout }}"

   - name: Check Current Running Cloud Native Stack Version
     shell: kubectl version -o json | jq .serverVersion.gitVersion | sed 's/\"//g'
     register: k8sversion

   - name: Create Cloud Native Stack cns_version.yaml
     when: "k8sversion.stdout == 'v1.31.2'"
     copy:
       dest: "/tmp/cns_version.yaml"
       content: |
         cns_version: 14.1

   - name: Create Cloud Native Stack cns_version.yaml
     when: "k8sversion.stdout == 'v1.31.6'"
     copy:
       dest: "/tmp/cns_version.yaml"
       content: |
         cns_version: 14.2

   - name: Create Cloud Native Stack cns_version.yaml
     when: "k8sversion.stdout == 'v1.32.2'"
     copy:
       dest: "/tmp/cns_version.yaml"
       content: |
         cns_version: 15.1

   - name: Fetch cns_version.yaml
     ansible.builtin.fetch:
       src: "/tmp/cns_version.yaml"
       dest: "{{lookup('pipe', 'pwd')}}/cns_version.yaml"
       flat: yes

   - name: Update the cns version in cns_values.yaml
     shell: |
       version=$(cat {{lookup('pipe', 'pwd')}}/cns_version.yaml | awk -F':' '{print $2}' | head -n1 | tr -d ' ' | tr -d '\n\r');  driver_version=$(cat {{lookup('pipe', 'pwd')}}/cns_values_$version.yaml | grep driver_version | awk -F':' '{print $2}' | head -n1 | tr -d ' ' | tr -d '\n\r')
       cp -r {{lookup('pipe', 'pwd')}}/cns_values_$version.yaml {{lookup('pipe', 'pwd')}}/cns_values.yaml
#       sed -i "s/cns_version: .*/cns_version: $version/g; s/gpu_driver_version: .*/gpu_driver_version: $driver_version/g" {{lookup('pipe', 'pwd')}}/cns_values.yaml

   - name: Update the cns_values
     when: cns_docker == true and cns_nvidia_driver == true
     replace:
       path: "{{lookup('pipe', 'pwd')}}/cns_values.yaml"
       regexp: '{{ item.regex }}'
       replace: '{{ item.replace }}'
     with_items:
       - { regex: 'cns_docker: no', replace: 'cns_docker: yes' }
       - { regex: 'cns_nvidia_driver: no', replace: 'cns_nvidia_driver: yes' }

   - name: Uninstall Operator if NVIDIA Cude Driver
     when: cns_nvidia_driver == true
     shell: helm del $(helm ls -A | grep gpu-oper | awk '{print $1}') --namespace nvidia-gpu-operator; sleep 60

- import_playbook: prerequisites.yaml

- import_playbook: nvidia-driver.yaml
  when: "release != 'tegra' and cns_nvidia_driver == true"

- hosts: master
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - name: Validate whether Kubernetes cluster installed
     shell: kubectl cluster-info
     register: k8sup
     no_log: True
     failed_when: false

   - name: Check Current Running Cloud Native Stack Version
     shell: kubectl get nodes --no-headers | awk '{print $NF}'
     register: k8sversion

   - name: Upgrade the Cloud Native Stack from 15.0 to 15.1
     shell: kubeadm upgrade apply v1.32.6 --force --ignore-preflight-errors=CreateJob
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.32.2'"
     become: true

   - name: Upgrade the Cloud Native Stack from 14.1 to 14.2
     shell: kubeadm upgrade apply v1.31.10 --force --ignore-preflight-errors=CreateJob
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.31.6'"
     become: true

   - name: Upgrade the Cloud Native Stack from 14.0 to 14.1
     shell: kubeadm upgrade apply v1.31.6 --force --ignore-preflight-errors=CreateJob
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.31.2'"
     become: true

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 15.0 or 14.2
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.32.2' and release != 'tegra' or 'running' in k8sup.stdout and k8sversion.stdout == 'v1.31.6' and release != 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/calico.yaml

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 14.1
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.30.6' and release != 'tegra' or 'running' in k8sup.stdout and k8sversion.stdout == 'v1.31.2' and release != 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/calico.yaml

   - pause:
       seconds: 15

   - name: Get Node name
     shell: "kubectl get nodes  | awk '{print $1}' | grep -v NAME"
     register: node_name
     no_log: True
     failed_when: false

   - name: Uncordon the nodes
     shell: "kubectl uncordon {{ item }}"
     with_items: "{{ node_name.stdout_lines }}"
     no_log: True
     failed_when: false

- import_playbook: operators-install.yaml
  when: "release != 'tegra' and cns_nvidia_driver == true"
  
- import_playbook: operators-upgrade.yaml
  when: "release != 'tegra' and cns_nvidia_driver == false"