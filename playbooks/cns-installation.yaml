- hosts: all
  gather_facts: yes
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
    - set_fact:
        cns_docker: "{{ cns_docker }}"
        cns_nvidia_driver: "{{ cns_nvidia_driver }}"
        cns_version: "{{ cns_version }}"
        cns_validation: "{{ cns_validation }}"
        confidential_computing: "{{ confidential_computing }}"
        microk8s: "{{ microk8s }}"
        kserve: "{{ kserve }}"
        storage: "{{ storage }}"
        monitoring: "{{ monitoring }}"
        loadbalancer: "{{ loadbalancer }}"
        install_k8s: "{{ install_k8s}}"

    - name: Checking Nouveau is disabled
      become: true
      shell: "lsmod | grep nouveau"
      register: nouveau_result
      failed_when: false

    - name: unload nouveau
      when: nouveau_result.rc == 0
      become: true
      modprobe:
        name: nouveau
        state: absent
      ignore_errors: true

    - name: blacklist nouveau
      when: nouveau_result.rc == 0
      become: true
      copy:
        dest: "/etc/modprobe.d/blacklist-nouveau.conf"
        owner: "root"
        group: "root"
        mode: "0644"
        content: |
          blacklist nouveau
          options nouveau modeset=0

    - name: check cgroups status
      shell: "stat -fc %T /sys/fs/cgroup/"
      register: cgroup

    - name: Update cgroup2
      shell: grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=1"
      when: ansible_os_family == 'RedHat'
      become: true

    - name: check and update RHEL version
      when: "ansible_distribution_version != '8.10' and ansible_os_family == 'RedHat'"
      shell: subscription-manager release --set 8.10; sudo yum update -y -q
      become: true

    - name: check for Kernel SNP release
      shell: uname -r | awk -F'-' '{print $3}'
      register: snp

    - name: conf_compu_snp_install script
      become: true
      when: "confidential_computing == true and snp.stdout != 'snp'"
      copy:
        src: "{{lookup('pipe', 'pwd')}}/files/conf_compu_snp_install.sh"
        dest: "{{ ansible_user_dir }}"
        mode: 0777

    - name: Run conf_compu_snp_install script, please wait
      become: true
      when: "confidential_computing == true and snp.stdout != 'snp'"
      shell: "bash {{ ansible_user_dir }}/conf_compu_snp_install.sh >> {{ ansible_user_dir }}/snp_install.log"

    - name: update-initramfs-ubuntu
      become: true
      command: update-initramfs -u
      when: ansible_os_family == "Debian" and nouveau_result.rc == 0

    - name: update-initramfs-rhel
      become: true
      command: dracut --force
      when: ansible_os_family == "RedHat" and nouveau_result.rc == 0

    - name: Check SELinux Status on RedHat
      when: ansible_distribution == 'RedHat'
      shell: sestatus | grep -i 'Current mode' | awk '{print $3}'
      register: selinuxstatus

    - name: Update SELinux Status on RHEL system
      when: ansible_distribution == 'RedHat' and selinuxstatus.stdout == 'enforcing'
      become: true
      shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

    - name: reboot the system
      when: "nouveau_result.rc == 0 or ansible_os_family == 'RedHat' and selinuxstatus.stdout == 'enforcing' or snp.stdout != 'snp' and confidential_computing == true or cgroup.stdout != 'cgroup2fs' and ansible_os_family == 'RedHat'"
      become: true
      reboot:
        reboot_timeout: 900

    - name: Install PreRequisites dependencies
      when: ansible_distribution == 'Ubuntu'
      become: true
      apt:
        name: ['mokutil', 'jq']
        state: present
        update_cache: yes

    - name: Install PreRequisites dependencies
      when: ansible_distribution == 'RedHat'
      become: true
      yum:
        name: ['mokutil', 'lsof']
        state: present
        update_cache: yes

    - name: Get Speedtest CLI
      get_url:
        url: https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
        dest: /tmp/speedtest-cli
        mode: '0777'

    - name: Get jq pacakge
      become: true
      get_url:
        url: https://github.com/stedolan/jq/releases/download/jq-1.7.1/jq-linux64
        dest: /usr/local/bin/jq
        mode: '0777'

    - name: Check Internet Speed
      ignore_errors: true
      failed_when: false
      shell: /usr/bin/python3 /tmp/speedtest-cli --secure --simple
      register: speed
      async: 30

    - name: Report Valid Internet Speed
      shell: echo {{ speed.stdout_lines[1] }} | awk '{print $3}'
      register: speedtest
      ignore_errors: true
      failed_when: "'Kbit/s' in speedtest.stdout"

    - name: check secure boot
      shell: mokutil --sb-state | awk '{print $2}'
      register: secure_boot
      failed_when: "'enabled' in secure_boot.stdout"
      ignore_errors: true

    - name: check enough storage
      shell: df --block-size 1g / --output=avail | tail -1 | sed "s/ //g"
      register: size
      failed_when: " size.stdout | int <= 40 and ansible_architecture == 'x86_64'"

    - name: Check Number of CPU's
      failed_when: ansible_processor_vcpus < 2
      shell: "echo 'minimum 2 CPUs required'"

    - name: Check memory requirements
      failed_when: ansible_memtotal_mb < 4096
      shell: "echo 'minimum 4GB memory required'"

    - name: Clean up kube config
      become: true
      file:
        path: /root/.kube
        state: absent

    - name: Get Nvidia Tegra Release
      shell: uname -r | awk -F'-' '{print $2}'
      register: release

    - set_fact:
        release: "{{ release.stdout }}"

    - name: Check CNS Version support for RHEL
      shell: "echo 'Not a Valid Installation please use CNS Version 10.0 above and retry'"
      failed_when: "cns_version < 10.0 and ansible_distribution in ['RedHat', 'CentOS']"

    - name: check dgx
      stat:
        path: /etc/dgx-release
      register: dgx

    - name: check l4t
      stat:
        path: /etc/l4t-release
      register: l4t

    - name: NVIDIA Driver Clean Up on DGX 
      when:  dgx.stat.exists == True and ansible_distribution == 'Ubuntu' and enable_rdma == true or dgx.stat.exists == True and ansible_distribution == 'Ubuntu' and enable_gds == true or l4t.stat.exists == True and ansible_distribution == 'Ubuntu' and enable_rdma == true or l4t.stat.exists == True and ansible_distribution == 'Ubuntu' and enable_gds == true
      become: true
      block:
        - name: Remove Ubuntu unattended upgrades to prevent apt lock
          ansible.builtin.apt:
            name: unattended-upgrades
            state: absent
            purge: yes
          register: apt_cleanup
          retries: 10
          until: apt_cleanup is success

        - name: Remove OLD Apt Repository
          apt_repository:
            repo: ppa:graphics-drivers/ppa
            state: absent
          register: ppa_clean
          retries: 10
          until: ppa_clean is success

        - name: Remove NVIDIA packages
          apt:
            name:
            - "*cuda*"
            - "libnvidia-cfg1-*"
            - "libnvidia-common-*"
            - "libnvidia-compute-*"
            - "libnvidia-decode-*"
            - "libnvidia-encode-*"
            - "libnvidia-extra-*"
            - "libnvidia-fbc1-*"
            - "libnvidia-gl-*"
            - "nvidia-compute-utils-*"
            - "nvidia-dkms-*"
            - "nvidia-driver-*"
            - "nvidia-kernel-common-*"
            - "nvidia-kernel-source-*"
            - "nvidia-modprobe"
            - "nvidia-prime"
            - "nvidia-settings"
            - "nvidia-utils-*"
            - "nvidia-fabricmanager-*"
            - "screen-resolution-extra"
            - "xserver-xorg-video-nvidia-*"
            - "gdm*"
            - "xserver-xorg-*"
            autoremove: yes
            purge: yes
            state: absent
          register: nvidia_cleanup
          retries: 10
          until: nvidia_cleanup is success

        - name: unload NVIDIA
          shell: /usr/bin/nvidia-uninstall --silent; kill -9 $(lsof /dev/nvidia* | awk '{print $2}' | grep -v PID | uniq); rmmod -f nvidia_uvm; rmmod -f nvidia_drm; rmmod -f nvidia_modeset; rmmod -f nvidia
          ignore_errors: yes
          failed_when: false     
#    - name: Add DHCP Mac to netplan 
#      become: true 
#      args: 
#        warn: false 
#      shell: 'sudo sed -ie "/dhcp4: .*/a\      dhcp-identifier: mac" /etc/netplan/*' 
 
 #   - name: Apply DHCP mac to NetPlan 
 #     become: true 
 #     shell: netplan apply 

- when: "cns_version > 4.1 and microk8s == false"
  import_playbook: prerequisites.yaml

- import_playbook: nvidia-driver.yaml
  when: "cns_nvidia_driver == true and release != 'tegra'"

- when: "cns_docker == true and release != 'tegra'"
  import_playbook: nvidia-docker.yaml

- when: "cns_version > 4.1 and microk8s == false and install_k8s == true"
  import_playbook: k8s-install.yaml

- when: "cns_version > 4.1 and release != 'tegra' and microk8s == false and install_k8s == true"
  import_playbook: operators-install.yaml

- when: "microk8s == true"
  import_playbook: microk8s.yaml

- when: "storage == true and install_k8s == true or monitoring == true and install_k8s == true or kserve == true and install_k8s == true or loadbalancer == true and install_k8s == true or lws == true and install_k8s == true"
  import_playbook: add-ons.yaml
  
- hosts: all
  gather_facts: yes
  vars_files:
    - cns_values.yaml
  tasks:
    - name: Get Nvidia Tegra Release
      shell: uname -r | awk -F'-' '{print $2}'
      register: release

    - set_fact:
        release: "{{ release.stdout }}"

    - name: Waiting for Cluster to up and running
      args:
        executable: /bin/bash
      shell: |
        sleep 240
        state=$(kubectl get pods -n nvidia-gpu-operator | egrep -v 'Running|Completed|NAME' | wc -l)
        while [ $state != 0 ]
          do
            sleep 10
            state=$(kubectl get pods -n nvidia-gpu-operator | egrep -v 'Running|Completed|NAME' | wc -l)
          done
      register: status
      when: "cns_version > 4.1 and cns_validation == true and release != 'tegra'"

- when: "cns_version > 4.1 and cns_validation == true and release != 'tegra'"
  import_playbook: cns-validation.yaml